#!/usr/bin/env bash
#
# Copyright (C) 2019-2024 KFERMercer <https://github.com/KFERMercer>
#
# A simple webcam capturer for CB & SC.
#

CTBCAP_VERSION=2.0
CTBCAP_RELEASE=6

# Streams saving path
[[ ${SAVE_PATH} ]] || SAVE_PATH="${PWD}/cap"

# Logs saving path
[[ ${LOG_PATH} ]] || LOG_PATH="${SAVE_PATH}/log/"

# Streamer's Username or Room Link
[[ ${MODEL} ]] || MODEL=

# Platform that streaming at. Choose <chaturbate> (default) or <stripchat>.
[[ ${PLATFORM} ]] || PLATFORM="chaturbate"

# Edging Mode.
# Delay initial requests to servers to avoid time-specific request waves caused by large-scale deployments.
# Inactive if not 1.
[[ ${EDGING_MODE} ]] || EDGING_MODE="uncle makes me pee white"

# Debug Mode. Inactive if not 1.
[[ ${DEBUG_MODE} ]] || DEBUG_MODE="your mom is so hot"

# Stream Mode. Only grab stream link. Inactive if not 1.
[[ ${STREAM_MODE} ]] || STREAM_MODE=

# https://jnrbsn.github.io/user-agents/user-agents.json
[[ ${UA} ]] || UA='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36'


# Check validity and process runtime variables.
function prepare_simping() {

	[ $# -gt 2 ] && echo -e "(ERROR) Invalid Parameter Number! \n" >&2 && exit 1

	case $1 in
		-h|--help)
			echo "Usage: ctbcap [options...] <streamer username or url>"
			echo "<username or url>		Start to Simping Stream"
			echo "-h, --help			Get help for commands"
			echo "-s, --stream <username or url>	Grab the stream link only"
			echo "-v, --version			Show version number and quit"
			echo
			exit 0
		;;
		-s|--stream)
			[[ ! $2 ]] \
				&& echo -e "(ERROR) Must contain <username or url> as \$2 ! \nSee --help for more \n" >&2 \
				&& exit 1

			STREAM_MODE=1

			MODEL=$2
		;;
		-v|--version)
			echo "chaturbate-grabber / ctbcap --- v${CTBCAP_VERSION}-r${CTBCAP_RELEASE}"
			echo "Copyright (C) 2019-2024 KFERMercer <https://github.com/KFERMercer>"
			echo "UA: ${UA}"
			echo
			exit 0
		;;
		-*|--*)
			echo -e "(ERROR) Invalid Parameter [$1] ! \n" >&2
			exit 1
		;;
		'')
			[[ ! ${MODEL} ]] \
				&& echo -e "(ERROR) Need Parameter! See --help \n" >&2 \
				&& exit 1
		;;
		*)
			MODEL=$1
		;;
	esac

	case $2 in
		-*|--*)
			echo -e "(ERROR) Invalid Parameter [$2] ! \n" >&2
			exit 1
		;;
		'')
		;;
		*)
			[ ! $1 = '-s' ] && [ ! $1 = '--stream' ] \
				&& echo -e "(ERROR) Invalid Parameter [$2] ! \n" >&2 \
				&& exit 1

			[[ ${MODEL} ]] || MODEL=$2
		;;
	esac

	# Assume ${MODEL} contain some link form, process & cut invalid chars.
	local MODEL_TEMP=$(echo ${MODEL,,} \
		| grep -oE 'http[s]?://[a-zA-Z]?+[.]?[a-zA-Z]+[.][a-zA-Z]+[/][^ /]+' \
		| cut -d '/' -f4 \
		| grep -oE '[a-zA-Z0-9_-]+' \
		| head -n 1)
	[[ ${MODEL_TEMP} ]] && MODEL=${MODEL_TEMP}
	# If ${MODEL} not link form, cut invalid chars.
	[[ ! ${MODEL_TEMP} ]] && MODEL=$(echo "${MODEL,,}" | grep -oE '[a-zA-Z0-9_-]+' | head -n 1)
	[[ ! ${MODEL} ]] && echo -e "(ERROR) Invalid Username or Link! [${MODEL}]\n" >&2 && exit 1

	SAVE_PATH=${SAVE_PATH%"/"}
	LOG_PATH=${LOG_PATH%"/"}
	if [[ ${STREAM_MODE} != "1" ]]; then
		mkdir -p ${LOG_PATH} ${SAVE_PATH} 2>/dev/null
		[ ! -w ${SAVE_PATH} ] && echo -e "(ERROR) Cannot Access To [${SAVE_PATH}/] ! \n" >&2 && exit 1
		[ ! -w ${LOG_PATH} ] && echo -e "(ERROR) Cannot Access To [${LOG_PATH}/] ! \n" >&2 && exit 1
	fi

	PLATFORM=${PLATFORM,,}
	case ${PLATFORM} in
		chaturbate|ctb|cb)
			PLATFORM=chaturbate
			LINK="https://chaturbate.com/api/chatvideocontext/${MODEL}/" # Must keep " / " at the end
		;;
		stripchat|stc|sc|st)
			PLATFORM=stripchat
			LINK="https://stripchat.com/api/front/v2/models/username/${MODEL}/cam"
		;;
		*)
			echo -e "(ERROR) Unknown Platform: [${PLATFORM}] ! \n" >&2 && exit 1
		;;
	esac

	echo "Simping Streamer: [${MODEL}] (${PLATFORM})"
	echo

}

function edging () {

	# Sleep time (s) before initial request to server. Range better EQ to ..watchdog().while.else.echo .
	[ $1 ] && local EDGING_TIME=$1 || local EDGING_TIME=$((RANDOM % 600)) # Random num B/E 0 - 600 (10 min)

	echo "Edging Mode is On. Delay [${EDGING_TIME}]s before Simping [${MODEL}]".
	echo
	echo "Considering we won't send any requests to [${PLATFORM}] server until Edging is over,"
	echo "So plase make sure that [${MODEL}] exists on [${PLATFORM}]. "
	echo
	echo "Edging..."
	echo

	sleep ${EDGING_TIME}

	echo "Edging Enough...Cum..."
	echo

}

function connect_utils() {

	case $1 in
		status)
			curl $2 \
			-4 -L -s -I \
			-H "user-agent: ${UA}" \
			--compressed \
			--connect-timeout 5 --retry 5 --retry-delay 2 \
			2>/dev/null | head -n 1 | grep -oE '[0-9]{3}' \
			|| echo 000
		;;
		dump)
			curl $2 \
			-4 -L -s -i\
			-H "user-agent: ${UA}" \
			--compressed \
			--connect-timeout 5 --retry 5 --retry-delay 2 \
			2>/dev/null | tr -d '\r'
		;;
	esac

}

# Fetch ${STREAM_LINK_GENERIC} & ${STREAM_LINK}, show them & return 0.
# If dont have ${STREAM_LINK_GENERIC} & ${STREAM_LINK}, return 1.
function fetch_m3u() {

	rm -f ${LOG_PATH}/${MODEL}-${PLATFORM}.online
	unset STREAM_LINK_GENERIC STREAM_LINK

	[ ! ${MODEL_NEW_NAME} ] && local CONNECT_DUMP=$(connect_utils dump ${LINK})
	[ ${MODEL_NEW_NAME} ] && local CONNECT_DUMP=$(connect_utils dump ${LINK_NEW_NAME})
	# Reuse ${CONNECT_DUMP} to get HTTP status code at the time.
	local CONNECT_STATUS=$(echo ${CONNECT_DUMP:0:15} | grep -oE '[0-9]{3}' || echo 000)
	case ${CONNECT_STATUS} in
	2*|3*)
		# Do nothing. leave to platform method to deal with.
	;;
	404)
		# ↓↓↓ Only effects on Stream Mode. Of not this mode, will leave to platform method to handle.
		[[ ${STREAM_MODE} == "1" ]] \
			&& echo -e "(ERROR) Can't find [${MODEL}] on [${PLATFORM}]. [${CONNECT_STATUS}] \n" >&2 \
			&& exit 1
	;;
	4*)
		echo "[$(date "+%Y%m%d-%H%M%S")] You might gotten blocked by CAPTCHA. [${CONNECT_STATUS}]" >&2
		return 1
	;;
	000)
		echo "[$(date "+%Y%m%d-%H%M%S")] Internet Connection Error. [${CONNECT_STATUS}]" >&2
		[[ ${STREAM_MODE} == "1" ]] && echo >&2 && exit 1
		return 1
	;;
	1*|5*|*)
		echo "[$(date "+%Y%m%d-%H%M%S")] ${PLATFORM} Server on failure now. [${CONNECT_STATUS}]" >&2
		[[ ${STREAM_MODE} == "1" ]] && echo >&2 && exit 1
		return 1
	;;
	esac

	case ${PLATFORM} in
	chaturbate)
		# Cheke of Model change to new name
		if [ ${CONNECT_STATUS} -eq 404 ]; then
			MODEL_NEW_NAME=$(connect_utils dump "https://chaturbate.com/${MODEL}/")
			local CONNECT_STATUS=$(echo ${MODEL_NEW_NAME:0:15} | grep -oE '[0-9]{3}' || echo 000)
			MODEL_NEW_NAME=$(echo ${MODEL_NEW_NAME} | grep -oE 'location:[ ]?/[^/]+/' | head -n 1 | cut -d '/' -f2)
			LINK_NEW_NAME=$(echo ${LINK} | sed "s|${MODEL}|${MODEL_NEW_NAME}|g")
			[ ${MODEL_NEW_NAME} ] \
				&& echo "[$(date "+%Y%m%d-%H%M%S")] (WARNING) [${MODEL}] has changed her name to [${MODEL_NEW_NAME}]. [${CONNECT_STATUS}]" >&2 \
				&& sleep 5 \
				&& local CONNECT_DUMP=$(connect_utils dump ${LINK_NEW_NAME}) \
				&& local CONNECT_STATUS=$(echo ${CONNECT_DUMP:0:15} | grep -oE '[0-9]{3}' || echo 000)
			[ ! ${MODEL_NEW_NAME} ] && \
				echo -e "(ERROR) Can't find [${MODEL}] on [${PLATFORM}]. [${CONNECT_STATUS}] \n" >&2 && exit 1
		else
			[ ${MODEL_NEW_NAME} ] \
				&& echo "[$(date "+%Y%m%d-%H%M%S")] (WARNING) [${MODEL}] has changed her name to [${MODEL_NEW_NAME}]." >&2
		fi

		if [[ ${CONNECT_DUMP} =~ ".m3u8" ]]; then
			STREAM_LINK_GENERIC=$(echo -e ${CONNECT_DUMP} | grep -oE 'http[s]?://edge[^ ]+\.m3u8' | head -n 1)
			STREAM_LINK=$(connect_utils dump ${STREAM_LINK_GENERIC} | tail -n 1)
			local ROOM_STATUS=$(echo ${CONNECT_DUMP} | grep -oE '"room_status":[ ]?"[^"]+"' | cut -d '"' -f4)
			[[ ${STREAM_LINK} ]] && STREAM_LINK=${STREAM_LINK_GENERIC%%playlist.m3u8*}${STREAM_LINK}
		else
			echo "[$(date "+%Y%m%d-%H%M%S")] [${MODEL}] is ${ROOM_STATUS} now. [${CONNECT_STATUS}]"
			return 1
		fi
	;;
	stripchat)
		if [ ${CONNECT_STATUS} -eq 404 ]; then
			# TODO: Name changing detection for Stripchat method.
			echo -e "(ERROR) Can't find [${MODEL}] on [${PLATFORM}]. [${CONNECT_STATUS}] \n" >&2 && exit 1
		fi

		if [[ ${CONNECT_DUMP} =~ '"isCamAvailable":true' ]]; then
			local STREAMNAME=$(echo -e ${CONNECT_DUMP})
			local STREAMNAME=${STREAMNAME#*'"streamName":"'}
			local STREAMNAME=${STREAMNAME%%'"'*}
			STREAM_LINK_GENERIC="https://edge-hls.doppiocdn.com/hls/${STREAMNAME}/master/${STREAMNAME}_auto.m3u8"
			STREAM_LINK=$(connect_utils dump ${STREAM_LINK_GENERIC} | grep -oE 'http[s]?://[^ ]+\.m3u8' | head -n 1)
		else
			echo "[$(date "+%Y%m%d-%H%M%S")] [${MODEL}] is offline/private now. [${CONNECT_STATUS}]"
			return 1
		fi
	;;
	esac

	# If successfully grabed ${STREAM_LINK_GENERIC} ${STREAM_LINK}, show them.
	if [ ${STREAM_LINK} ]; then
		echo "[$(date "+%Y%m%d-%H%M%S")] Captured Stream Link with status [$([ ${ROOM_STATUS} ] && echo ${ROOM_STATUS} || echo online)] :"
		echo "[$(date "+%Y%m%d-%H%M%S")] ${STREAM_LINK_GENERIC}"
		echo "[$(date "+%Y%m%d-%H%M%S")] Highest Definition Stream Link:"
		echo "[$(date "+%Y%m%d-%H%M%S")] ${STREAM_LINK}"
		[[ ${STREAM_MODE} == "1" ]] && echo
		return 0
	else
		echo "[$(date "+%Y%m%d-%H%M%S")] Failed to fetch stream link! [$(connect_utils status ${STREAM_LINK_GENERIC})]"
	fi

}

function grab_stream() {

	local FFMPEG_LOGFILE="${LOG_PATH}/${MODEL}-${PLATFORM}.ffmpeg.log"
	local CAPTURE_TIME=$(date "+%Y%m%d-%H%M%S")

	echo >> ${FFMPEG_LOGFILE}
	echo "========== [${CAPTURE_TIME}] ==========" >> ${FFMPEG_LOGFILE}
	echo >> ${FFMPEG_LOGFILE}

	ffmpeg \
	-user_agent "${UA}" \
	-i ${STREAM_LINK} \
	-c copy \
	-f segment \
	-segment_time 1800 \
	-segment_start_number 1 \
	-reset_timestamps 1 \
	-loglevel warning \
	${SAVE_PATH}/${MODEL}-${CAPTURE_TIME}_%03d.mkv \
	>> ${FFMPEG_LOGFILE} 2>&1
}

function watchdog() {
	while [ true ]; do
		fetch_m3u
		if [ ${STREAM_LINK} ]; then

			echo "[$(date "+%Y%m%d-%H%M%S")] Now start recording..."
			echo ${STREAM_LINK} > ${LOG_PATH}/${MODEL}-${PLATFORM}.online # Build online flag file

			grab_stream
			# If recording interrupt by first time
			while [ true ]; do
				echo "[$(date "+%Y%m%d-%H%M%S")] Recording Interrupted..."
				local STREAM_TEMP_STATUS=$(connect_utils status ${STREAM_LINK})
				case ${STREAM_TEMP_STATUS} in
					2*|3*)
						# Reconnect.
						echo "[$(date "+%Y%m%d-%H%M%S")] Restart recording... [${STREAM_TEMP_STATUS}]"
						grab_stream
					;;
					*)
						echo "[$(date "+%Y%m%d-%H%M%S")] Stream Link closed... [${STREAM_TEMP_STATUS}]"
						break
					;;
				esac
			done

			rm -f ${LOG_PATH}/${MODEL}-${PLATFORM}.online # Delete online flag file

			echo "[$(date "+%Y%m%d-%H%M%S")] Sleep for around 5 min & try reconnect..."
			sleep $((RANDOM % (121) + 240)) # Random num B/E 240 - 360
		else
			echo "[$(date "+%Y%m%d-%H%M%S")] Sleep for around 10 min..."
			sleep $((RANDOM % (241) + 480)) # Random num B/E 480 - 720
		fi
	done
}

function sock_washer() {
	rm -f ${LOG_PATH}/${MODEL}-${PLATFORM}.online
	echo
	echo "BYE (. Y .) BYE"
	echo
	exit 0
}

# Execution Entry

trap 'sock_washer' SIGHUP SIGINT SIGQUIT SIGTERM

echo
echo "8=====================================================D"
echo " ┌─┐┬ ┬┌─┐┌┬┐┬ ┬┬─┐┌┐ ┌─┐┌┬┐┌─┐  ┌─┐┬─┐┌─┐┌┐ ┌┐ ┌─┐┬─┐"
echo " │  ├─┤├─┤ │ │ │├┬┘├┴┐├─┤ │ ├┤───│ ┬├┬┘├─┤├┴┐├┴┐├┤ ├┬┘"
echo " └─┘┴ ┴┴ ┴ ┴ └─┘┴└─└─┘┴ ┴ ┴ └─┘  └─┘┴└─┴ ┴└─┘└─┘└─┘┴└─"
echo "                        v${CTBCAP_VERSION}-r${CTBCAP_RELEASE}"
echo "8=====================================================D"
echo "              Simping Stream from CB & SC"
echo

prepare_simping $1 $2 $3

[[ ${DEBUG_MODE}  == "1" ]] && set -x # Debug Mode

[[ ${EDGING_MODE} == "1" ]] && edging

[[ ${STREAM_MODE} == "1" ]] && fetch_m3u && exit 0

watchdog > >(tee -a ${LOG_PATH}/${MODEL}-${PLATFORM}.log >> /dev/stdout) \
		2> >(tee -a ${LOG_PATH}/${MODEL}-${PLATFORM}.log >> /dev/stderr)

exit 0

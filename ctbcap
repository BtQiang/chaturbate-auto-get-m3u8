#!/usr/bin/env sh
#
# Copyright (C) 2019-2024 KFERMercer <https://github.com/KFERMercer>
#
# A simple webcam capturer for CB & SC.
#

CTBCAP_VERSION=2.0
CTBCAP_RELEASE=6

# Streams saving path
[ -n "${SAVE_PATH}" ] || SAVE_PATH="${PWD}/cap"

# Logs saving path
[ -n "${LOG_PATH}" ] || LOG_PATH="${SAVE_PATH}/log/"

# Streamer's Username or Room Link
[ -n "${MODEL}" ] || MODEL=

# Platform that streaming at. Choose <chaturbate> (default) or <stripchat>.
[ -n "${PLATFORM}" ] || PLATFORM="chaturbate"

# Edging Mode.
# Delay initial requests to servers to avoid time-specific request waves caused by large-scale deployments.
# Inactive if not 1.
[ "${EDGING_MODE}" = "1" ] || EDGING_MODE=

# Debug Mode. Inactive if not 1.
[ "${DEBUG_MODE}" = "1" ] || DEBUG_MODE=

# Link Mode. Only grab stream link. Inactive if not 1.
[ "${LINK_MODE}" = "1" ] || LINK_MODE=

# https://jnrbsn.github.io/user-agents/user-agents.json
[ -n "${UA}" ] || UA='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36'

# Check validity and process runtime variables.
prepare_simping() {

	hello() {
		echo "Usage: ctbcap [options...] <streamer username or url>"
		echo
		echo "<username or url>	Streamer's Username or Chat"
		echo "			Room Link."
		echo
		echo "-d			[D]ebug Mode."
		echo "			Show the raw crawler data."
		echo
		echo "-e			[E]dging Mode."
		echo "			Delay initial requests to"
		echo "			servers by Random Time in"
		echo "			10 min to avoid time-specific"
		echo "			request waves caused by"
		echo "			large-scale deployments."
		echo
		echo "-f </path/to/viddir>	Video [f]ile Saving Path,"
		echo "			Default is /\${PWD}/cap/ ."
		echo "			Don't Touch if Runs in Docker."
		echo
		echo "-h			Get [H]elp for Commands."
		echo
		echo "-l			[L]ink Mode."
		echo "			Try Only capture the Stream"
		echo "			Link and disable recording"
		echo "			procedure."
		echo
		echo "-o </path/to/logdir>	L[o]g Saving Path,"
		echo "			Default is /\${PWD}/cap/log/ ,"
		echo "			Don't Touch if Runs in Docker."
		echo
		echo "-p <chaturbate|stripchat> Specifi Stream [P]latform"
		echo "			<chaturbate> (default) or"
		echo "			<stripchat>, also support"
		echo "			<ctb|cb> / <stc|sc|st>."
		echo "			Change if online detection"
		echo "			goes wrong."
		echo
		echo "-v			Show version number and quit"
		echo
		echo
		echo "Chaturbate-Grabber (aka CtbCap) is made by KFERMercer"
		echo "with Sweat and Cum. Please use Her under GPLv3, and"
		echo "kindly ask you that don't use for any commercial "
		echo "operations. If you like this toy, please visit the"
		echo "official REPO to Star/Fork, Issue/PR are also open:"
		echo "<https://github.com/KFERMercer/chaturbate-grabber>"
		echo
	}

	while getopts ':def:hlo:p:v' OPT; do
		case ${OPT} in
		d) DEBUG_MODE=1 ;;
		e) EDGING_MODE=1 ;;
		f) SAVE_PATH=${OPTARG} ;;
		h) hello && exit 0 ;;
		l) LINK_MODE=1 ;;
		o) LOG_PATH=${OPTARG} ;;
		p) PLATFORM=${OPTARG} ;;
		v)
			echo "Chaturbate-Grabber (aka CtbCap) v${CTBCAP_VERSION}-r${CTBCAP_RELEASE}."
			echo
			echo "We defend the ideals of Communism and Anarky, Believe that the transmission"
			echo "of knowledge and information cannot receive any perceived impediment."
			echo
			echo "Copyright (C) 2019-2024-, KFERMercer <https://github.com/KFERMercer>."
			echo
			echo "UA in Use: ${UA}"
			echo
			exit 0
		;;
		\?)
			printf "(ERROR) Invalid Option [$1] ! \n\n$(hello)\n\n" >&2
			exit 1
		;;
		:)
			[ "${OPTARG}" = "f" ] \
			&& printf "(ERROR) No Video Saving Path Specified!\n\nSee --help\n\n" >&2 && exit 1
			[ "${OPTARG}" = "o" ] \
			&& printf "(ERROR) No Log Saving Path Specified!\n\nSee --help\n\n" >&2 && exit 1
			[ "${OPTARG}" = "p" ] \
			&& printf "(ERROR) No Platform Specified!\n\nSee --help\n\n" >&2 && exit 1
		;;
		esac
	done
	shift $((${OPTIND} - 1))
	[ -z "$1" ] && echo "(NOTICE) No Option Specified! Show Help Message..." && echo && echo "$(hello)" && exit 0

	MODEL=$1
	# Assume ${MODEL} contain some link form, process & cut invalid chars.
	local MODEL_TEMP=$(echo ${MODEL} \
		| tr '[:upper:]' '[:lower:]' \
		| grep -oE 'http[s]?://[a-zA-Z]?+[.]?[a-zA-Z]+[.][a-zA-Z]+[/][^ /]+' \
		| cut -d '/' -f4 \
		| grep -oE '[a-zA-Z0-9_-]+' \
		| head -n 1)
	[ -n "${MODEL_TEMP}" ] && MODEL=${MODEL_TEMP}
	# If ${MODEL} not link form, cut invalid chars.
	[ -z "${MODEL_TEMP}" ] && MODEL=$(echo ${MODEL} | tr '[:upper:]' '[:lower:]'| grep -oE '[a-zA-Z0-9_-]+' | head -n 1)
	[ -z "${MODEL}" ] && printf "(ERROR) Invalid Username or Link! [${MODEL}]\n\n" >&2 && exit 1

	PLATFORM=$(echo ${PLATFORM} | tr '[:upper:]' '[:lower:]')
	case ${PLATFORM} in
		chaturbate|ctb|cb)
			PLATFORM=chaturbate
			LINK="https://chaturbate.com/api/chatvideocontext/${MODEL}/" # Must keep " / " at the end
		;;
		stripchat|stc|sc|st)
			PLATFORM=stripchat
			LINK="https://stripchat.com/api/front/v2/models/username/${MODEL}/cam"
		;;
		*)
			printf "(ERROR) Unknown Platform: [${PLATFORM}] ! \n\n" >&2 && exit 1
		;;
	esac

	SAVE_PATH=${SAVE_PATH%"/"}
	LOG_PATH=${LOG_PATH%"/"}
	if [ "${LINK_MODE}" != "1" ]; then
		mkdir -p ${LOG_PATH} ${SAVE_PATH} 2>/dev/null
		[ ! -w ${SAVE_PATH} ] && printf "(ERROR) Cannot Access To [${SAVE_PATH}/] ! \n\n" >&2 && exit 1
		[ ! -w ${LOG_PATH} ] && printf "(ERROR) Cannot Access To [${LOG_PATH}/] ! \n\n" >&2 && exit 1
	fi

	echo "Simping Streamer: [${MODEL}] (${PLATFORM})"
	echo

}

# Power Tools
utils() {

	case $1 in
	connect_status)
		curl $2 \
		-4 -L -s -I \
		-A "${UA}" \
		--compressed \
		--connect-timeout 5 --retry 5 --retry-delay 2 \
		2>/dev/null | head -n 1 | grep -oE '[0-9]{3}' \
		|| echo 000
	;;
	connect_dump)
		curl $2 \
		-4 -L -s -i\
		-A "${UA}" \
		--compressed \
		--connect-timeout 5 --retry 5 --retry-delay 2 \
		2>/dev/null | tr -d '\r'
	;;
	# RE-Implement RANDOM NUM Tool on POSIX Shell (B/E).
	radom_num)
		# Usage: ` utils radom_num ${SNUM} ${BNUM} `
		local SNUM=$2 # INT. Must >= 0. Small-end of Random Num you want. Must >= 0.
		local BNUM=$3 # INT. Must < (2^32)/2. Big-end of Random Num you want. Must < (2^32)/2.
		local BNUM=$(( ${BNUM} +1 )) # Add ${BNUM} to the pool, make method become B/E Random.
		local RSEED=$(od -An -N4 -tu4 /dev/urandom) # Gen random num B/E 0 - (2^32-1) as Seed. 
		local SEEDMIN=$(( 4294967295 % ( ${BNUM} - ${SNUM} ) )) # ${SEED} =< ${SEEDMIN} will cause redundant modulus.
		while [ ${RSEED} -le ${SEEDMIN} ]; do
			local RSEED=$(od -An -N4 -tu4 /dev/urandom) # If ${SEED} =< ${SEEDMIN}, Reshake ${RSEED} till isn't.
		done
		echo $(( ${RSEED} % ( ${BNUM} - ${SNUM} ) + ${SNUM} )) # Format Same as $((RANDOM)) in Bash.
	;;
	esac

}

edging () {

	# Sleep time (s) before initial request to server. Range better EQ to ..watchdog().while.else.echo .
	[ $1 ] && local EDGING_TIME=$1 || local EDGING_TIME=$(utils radom_num 0 600) # Random num B/E 0 - 600 (10 min)

	echo "Edging Mode is On. Delay [${EDGING_TIME}]s before Simping [${MODEL}]".
	echo
	echo "Considering we won't send any requests to [${PLATFORM}] server until Edging is over,"
	echo "So plase make sure that [${MODEL}] exists on [${PLATFORM}]. "
	echo
	echo "Edging..."
	echo

	sleep ${EDGING_TIME}

	echo "Edging Enough...Cum..."
	echo

}

# Fetch ${STREAM_LINK_GENERIC} & ${STREAM_LINK}, show them & return 0.
# If dont have ${STREAM_LINK_GENERIC} & ${STREAM_LINK}, return 1.
fetch_m3u() {

	rm -f ${LOG_PATH}/${MODEL}-${PLATFORM}.online
	unset STREAM_LINK_GENERIC STREAM_LINK

	[ -z "${MODEL_NEW_NAME}" ] && local CONNECT_DUMP=$(utils connect_dump ${LINK})
	[ -n "${MODEL_NEW_NAME}" ] && local CONNECT_DUMP=$(utils connect_dump ${LINK_NEW_NAME})
	# Reuse ${CONNECT_DUMP} to get HTTP status code at the time.
	local CONNECT_STATUS=$(echo ${CONNECT_DUMP} | cut -c -15 | grep -oE '[0-9]{3}' || echo 000)
	case ${CONNECT_STATUS} in
	2*|3*)
		# Do nothing. leave to platform method to deal with.
	;;
	404)
		# ↓↓↓ Only effects on Link Mode. Of not this mode, leave to platform method to handle.
		[ "${LINK_MODE}" = "1" ] \
			&& printf "(ERROR) Can't find [${MODEL}] on [${PLATFORM}]. [${CONNECT_STATUS}] \n\n" >&2 \
			&& exit 1
	;;
	4*)
		echo "[$(date "+%Y%m%d-%H%M%S")] You might gotten blocked by CAPTCHA. [${CONNECT_STATUS}]" >&2
		return 1
	;;
	000)
		echo "[$(date "+%Y%m%d-%H%M%S")] Internet Connection Error. [${CONNECT_STATUS}]" >&2
		[ "${LINK_MODE}" = "1" ] && echo >&2 && exit 1
		return 1
	;;
	1*|5*|*)
		echo "[$(date "+%Y%m%d-%H%M%S")] ${PLATFORM} Server on failure now. [${CONNECT_STATUS}]" >&2
		[ "${LINK_MODE}" = "1" ] && echo >&2 && exit 1
		return 1
	;;
	esac

	# Core methods by each Platform:
	case ${PLATFORM} in
	chaturbate)
		# Cheke of Model change to new name
		if [ ${CONNECT_STATUS} -eq 404 ]; then
			MODEL_NEW_NAME=$(utils connect_dump "https://chaturbate.com/${MODEL}/")
			local CONNECT_STATUS=$(echo ${MODEL_NEW_NAME} | cut -c -15 | grep -oE '[0-9]{3}' || echo 000)
			MODEL_NEW_NAME=$(echo ${MODEL_NEW_NAME} | grep -oE 'location:[ ]?/[^/]+/' | head -n 1 | cut -d '/' -f2)
			LINK_NEW_NAME=$(echo ${LINK} | sed "s|${MODEL}|${MODEL_NEW_NAME}|g")
			[ -n "${MODEL_NEW_NAME}" ] \
				&& echo "[$(date "+%Y%m%d-%H%M%S")] (WARNING) [${MODEL}] has changed her name to [${MODEL_NEW_NAME}]. [${CONNECT_STATUS}]" >&2 \
				&& sleep 5 \
				&& local CONNECT_DUMP=$(utils connect_dump ${LINK_NEW_NAME}) \
				&& local CONNECT_STATUS=$(echo ${CONNECT_DUMP} | cut -c -15 | grep -oE '[0-9]{3}' || echo 000)
			[ -z "${MODEL_NEW_NAME}" ] && \
				printf "(ERROR) Can't find [${MODEL}] on [${PLATFORM}]. [${CONNECT_STATUS}] \n\n" >&2 && exit 1
		else
			[ -n "${MODEL_NEW_NAME}" ] \
				&& echo "[$(date "+%Y%m%d-%H%M%S")] (WARNING) [${MODEL}] has changed her name to [${MODEL_NEW_NAME}]." >&2
		fi

		# Check if online:
		local ROOM_STATUS=$(echo ${CONNECT_DUMP} | grep -oE '"room_status":[ ]?"[^"]+"' | cut -d '"' -f4)
		if [ -n "$(echo ${CONNECT_DUMP} | grep -oE 'http[s]?://edge[^ ]+\.m3u8')" ]; then
			STREAM_LINK_GENERIC=$(echo ${CONNECT_DUMP} | grep -oE 'http[s]?://edge[^ ]+\.m3u8' | head -n 1)
			STREAM_LINK=$(utils connect_dump ${STREAM_LINK_GENERIC} | tail -n 1)
			[ -n "${STREAM_LINK}" ] && STREAM_LINK=$(echo ${STREAM_LINK_GENERIC} | sed 's|playlist.m3u8.*||')${STREAM_LINK}
		else
			echo "[$(date "+%Y%m%d-%H%M%S")] [${MODEL}] is ${ROOM_STATUS} now. [${CONNECT_STATUS}]"
			return 1
		fi
	;;
	stripchat)
		if [ ${CONNECT_STATUS} -eq 404 ]; then
			# TODO: Name changing detection for Stripchat method.
			printf "(ERROR) Can't find [${MODEL}] on [${PLATFORM}]. [${CONNECT_STATUS}] \n\n" >&2 && exit 1
		fi

		if [ -n "$(echo ${CONNECT_DUMP} | grep -o '"isCamAvailable":true')" ]; then
			local STREAMNAME=$(echo ${CONNECT_DUMP} | sed 's|.*"streamName":"||'| sed 's|".*||')
			STREAM_LINK_GENERIC="https://edge-hls.doppiocdn.com/hls/${STREAMNAME}/master/${STREAMNAME}_auto.m3u8"
			STREAM_LINK=$(utils connect_dump ${STREAM_LINK_GENERIC} | grep -oE 'http[s]?://[^ ]+\.m3u8' | head -n 1)
		else
			echo "[$(date "+%Y%m%d-%H%M%S")] [${MODEL}] is offline/private now. [${CONNECT_STATUS}]"
			return 1
		fi
	;;
	esac

	# If successfully grabed ${STREAM_LINK_GENERIC} ${STREAM_LINK}, show them.
	if [ -n "${STREAM_LINK}" ]; then
		echo "[$(date "+%Y%m%d-%H%M%S")] [${MODEL}] is Online now! [$([ -n "${ROOM_STATUS}" ] && echo ${ROOM_STATUS} || echo online)]"
		echo "[$(date "+%Y%m%d-%H%M%S")] Successfully Captured Stream Link:"
		echo "[$(date "+%Y%m%d-%H%M%S")] ${STREAM_LINK_GENERIC}"
		echo "[$(date "+%Y%m%d-%H%M%S")] Highest Definition Stream Link:"
		echo "[$(date "+%Y%m%d-%H%M%S")] ${STREAM_LINK}"
		[ "${LINK_MODE}" = "1" ] && echo
		return 0
	else
		echo "[$(date "+%Y%m%d-%H%M%S")] Failed to fetch stream link! [$(utils connect_status ${STREAM_LINK_GENERIC})]"
	fi

}

grab_stream() {

	local FFMPEG_LOGFILE="${LOG_PATH}/${MODEL}-${PLATFORM}.ffmpeg.log"
	local CAPTURE_TIME=$(date "+%Y%m%d-%H%M%S")

	echo >> ${FFMPEG_LOGFILE}
	echo "========== [${CAPTURE_TIME}] ==========" >> ${FFMPEG_LOGFILE}
	echo >> ${FFMPEG_LOGFILE}

	ffmpeg \
	-user_agent "${UA}" \
	-i ${STREAM_LINK} \
	-c copy \
	-f segment \
	-segment_time 1800 \
	-segment_start_number 1 \
	-reset_timestamps 1 \
	-loglevel warning \
	${SAVE_PATH}/${MODEL}-${CAPTURE_TIME}_%03d.mkv \
	>> ${FFMPEG_LOGFILE} 2>&1
}

watchdog() {
	while true; do
		fetch_m3u
		if [ -n "${STREAM_LINK}" ]; then

			echo "[$(date "+%Y%m%d-%H%M%S")] Now start recording..."
			echo ${STREAM_LINK} > ${LOG_PATH}/${MODEL}-${PLATFORM}.online # Build online flag file
			echo ${UA} >> ${LOG_PATH}/${MODEL}-${PLATFORM}.online

			grab_stream
			# If recording interrupt by first time
			while true; do
				echo "[$(date "+%Y%m%d-%H%M%S")] Recording Interrupted..."
				local STREAM_TEMP_STATUS=$(utils connect_status ${STREAM_LINK})
				case ${STREAM_TEMP_STATUS} in
					2*|3*)
						# Reconnect.
						echo "[$(date "+%Y%m%d-%H%M%S")] Restart recording... [${STREAM_TEMP_STATUS}]"
						grab_stream
					;;
					*)
						echo "[$(date "+%Y%m%d-%H%M%S")] Stream Link closed... [${STREAM_TEMP_STATUS}]"
						break
					;;
				esac
			done

			rm -f ${LOG_PATH}/${MODEL}-${PLATFORM}.online # Delete online flag file

			echo "[$(date "+%Y%m%d-%H%M%S")] Sleep for around 5 min & try reconnect..."
			sleep $(utils radom_num 240 360) # Random num B/E 240 - 360
		else
			echo "[$(date "+%Y%m%d-%H%M%S")] Sleep for around 10 min..."
			sleep $(utils radom_num 480 720) # Random num B/E 480 - 720
		fi
	done
}

sock_washer() {
	rm -f ${LOG_PATH}/${MODEL}-${PLATFORM}.online
	echo
	echo "BYE (. Y .) BYE"
	echo
	exit 0
}

# Execution Entry

trap 'sock_washer' HUP INT QUIT TERM

echo
echo "8=====================================================D"
echo " ┌─┐┬ ┬┌─┐┌┬┐┬ ┬┬─┐┌┐ ┌─┐┌┬┐┌─┐  ┌─┐┬─┐┌─┐┌┐ ┌┐ ┌─┐┬─┐"
echo " │  ├─┤├─┤ │ │ │├┬┘├┴┐├─┤ │ ├┤───│ ┬├┬┘├─┤├┴┐├┴┐├┤ ├┬┘"
echo " └─┘┴ ┴┴ ┴ ┴ └─┘┴└─└─┘┴ ┴ ┴ └─┘  └─┘┴└─┴ ┴└─┘└─┘└─┘┴└─"
echo "                        v${CTBCAP_VERSION}-r${CTBCAP_RELEASE}"
echo "8=====================================================D"
echo "              Simping Stream from CB & SC"
echo

prepare_simping $@

[ "${DEBUG_MODE}" = "1" ] && set -x # Debug Mode

[ "${EDGING_MODE}" = "1" ] && edging

[ "${LINK_MODE}" = "1" ] && fetch_m3u && exit 0

watchdog 2>&1 | tee -a ${LOG_PATH}/${MODEL}-${PLATFORM}.log

exit 0

#!/usr/bin/env bash
#
# Copyright (C) 2019-2024 KFERMercer <https://github.com/KFERMercer>
#
# A simple webcam capturer for CB & SC.
#

CTBCAP_VERSION=2.0
CTBCAP_RELEASE=6

# Streams saving path
[[ ${SAVE_PATH} ]] || SAVE_PATH="${PWD}/cap"

# Logs saving path
[[ ${LOG_PATH} ]] || LOG_PATH="${SAVE_PATH}/log/"

# Streamer's Username or Room Link
[[ ${MODEL} ]] || MODEL=

# Platform that streaming at. Choose <chaturbate> (default) or <stripchat>.
[[ ${PLATFORM} ]] || PLATFORM="chaturbate"

# Edging Mode.
# Delay initial requests to servers to avoid time-specific request waves caused by large-scale deployments.
# Inactive if not 1.
[[ ${EDGING_MODE} ]] || EDGING_MODE="uncle makes me pee white"

# Debug Mode. Inactive if not 1.
[[ ${DEBUG_MODE} ]] || DEBUG_MODE="your mom is so hot"

# Stream Mode. Only grab stream link. Inactive if not 1.
[[ ${STREAM_MODE} ]] || STREAM_MODE=

# https://jnrbsn.github.io/user-agents/user-agents.json
[[ ${UA} ]] || UA='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36'


# Check validity and process runtime variables.
function handle_input() {

	[ $# -gt 2 ] && echo "(ERROR) Invalid Parameter Number!" && echo && exit 1

	case $1 in
		-h|--help)
			echo "Usage: ctbcap [options...] <streamer username or url>"
			echo "<username or url>		Start to Simping Stream"
			echo "-h, --help			Get help for commands"
			echo "-s, --stream <username or url>	Grab the stream link only"
			echo "-v, --version			Show version number and quit"
			echo
			exit 0
		;;
		-s|--stream)
			[[ ! ${MODEL} ]] && echo '(ERROR) Must contain <username or url> as $2 !' && \
			echo "See --help for more" && \
			echo && \
			exit 1
			STREAM_MODE=1
			[[ ${MODEL} ]] || MODEL=$2
		;;
		-v|--version)
			echo "chaturbate-grabber / ctbcap --- v${CTBCAP_VERSION}-r${CTBCAP_RELEASE}"
			echo "Copyright (C) 2019-2024 KFERMercer <https://github.com/KFERMercer>"
			echo "UA: ${UA}"
			echo
			exit 0
		;;
		-*|--*)
			echo "(ERROR) Invalid Parameter [$1] !"
			echo
			exit 1
		;;
		'')
			[[ ! ${MODEL} ]] && echo "(ERROR) Need Parameter! See --help" && \
			echo && \
			exit 1
		;;
		*)
			MODEL=$1
		;;
	esac

	case $2 in
		-*|--*)
			echo "(ERROR) Invalid Parameter [$2] !"
			echo
			exit 1
		;;
		'')
		;;
		*)
			[ $1 = '-v' ] || [ $1 = '--version' ] && MODEL=$2
			[[ ${MODEL} ]] && echo "(ERROR) Invalid Parameter [$2] !" && \
			echo && \
			exit 1
		;;
	esac

	MODEL=${MODEL,,}
	MODEL=${MODEL#*"chaturbate.com/"}
	MODEL=${MODEL#*"stripchat.com/"}
	MODEL=${MODEL%"/"*}
	MODEL_NAME=${MODEL}
	unset MODEL

	SAVE_PATH=${SAVE_PATH%"/"}
	LOG_PATH=${LOG_PATH%"/"}

	PLATFORM=${PLATFORM,,}
	case ${PLATFORM} in
		chaturbate|ctb|cb)
			PLATFORM=chaturbate
			LINK="https://chaturbate.com/${MODEL_NAME}/" # Must keep " / " at the end
		;;
		stripchat|stc|sc|st)
			PLATFORM=stripchat
			LINK="https://stripchat.com/api/front/v2/models/username/${MODEL_NAME}/cam"
		;;
	esac
	[ ! ${LINK} ] && echo "(ERROR) Unknown Platform: [$PLATFORM] !" && echo && exit 1

}

function edging () {

	# Sleep time (s) before initial request to server. Range better EQ to ..watchdog.while.else.echo .
	[ $1 ] && local EDGING_TIME=$1 || local EDGING_TIME=$((RANDOM % 600)) # Random num BI 0 - 600 (10 min)

	echo "Edging Mode is On. Delay [${EDGING_TIME}]s before Simping [${MODEL_NAME}]".
	echo
	echo "Considering we wont send any requests to [${PLATFORM}] server until Edging is over,"
	echo "So plase make sure that [${MODEL_NAME}] exists on [${PLATFORM}]. "
	echo
	echo "Edging..."
	echo

	sleep ${EDGING_TIME}

	echo "Edging Enough...Cum..."
	echo

}

function connect_utils() {

	case $1 in
		status)
			curl $2 \
			-4 -L -s \
			--compressed \
			-I -w %{http_code} \
			--connect-timeout 5 --retry 5 --retry-delay 2 \
			-H "user-agent: ${UA}" \
			2>/dev/null | tail -1
		;;
		dump)
			curl $2 \
			-4 -L -s \
			--compressed \
			-w %{http_code} \
			--connect-timeout 5 --retry 5 --retry-delay 2 \
			-H "user-agent: ${UA}" \
			2>/dev/null | grep -v '^$'
		;;
		dump_m3u)
			curl $2 \
			-4 -L -s \
			--compressed \
			--connect-timeout 5 --retry 5 --retry-delay 2 \
			-H "user-agent: ${UA}" \
			2>/dev/null | tail -1 \
		;;
	esac

}

function prepare_simping() {

	mkdir -p ${LOG_PATH} ${SAVE_PATH} 2>/dev/null
	[ ! -w ${SAVE_PATH} ] && echo "(ERROR) No Permission To Write [${SAVE_PATH}/] !" && echo && exit 1
	[ ! -w ${LOG_PATH} ] && echo "(ERROR) No Permission To Write [${LOG_PATH}/] !" && echo && exit 1

	rm -f ${LOG_PATH}/${MODEL_NAME}-${PLATFORM}.online

	local CONNECT_STATUS=$(connect_utils status ${LINK})
	[ ${CONNECT_STATUS} -ge 400 ] && \
	echo "(ERROR) [${MODEL_NAME}] does not exist on [${PLATFORM}]. [${CONNECT_STATUS}]" && \
	echo && \
	exit 1


	# For stripchat:
	# if [ ${PLATFORM} = "stripchat" ]; then
	# 	local CONNECT_DUMPS=$(connect_utils dump ${LINK})
	# 	[[ ${CONNECT_DUMPS} =~ '"error":"Not Found"' ]] && \
	# 	echo "(ERROR) [${MODEL_NAME}] does not exist on Platform [${PLATFORM}]." && \
	# 	echo && \
	# 	exit 1
	# fi

	echo "Simping Streamer: ${MODEL_NAME} (${PLATFORM}) (${CONNECT_STATUS})"
	echo
}

# Fetch video stream, assign ${STREAM_LINK} & ${STREAM_LINK_GENERIC}.
function link_to_m3u() {

	local CONNECT_DUMPS=$(connect_utils dump ${LINK})
	local CONNECT_STATUS=$(echo ${CONNECT_DUMPS} | tail -n1 | grep -oE '.{3}$')
	[ ! ${CONNECT_STATUS} ] && local CONNECT_STATUS=000 # If connect failed, fallback to 000.

	# For chaturbate:
	if [ ${PLATFORM} = "chaturbate" ]; then
		if [[ ${CONNECT_DUMPS} =~ ".m3u8" ]]; then
			STREAM_LINK_GENERIC=$(echo -e ${CONNECT_DUMPS} | grep -oE 'http[s]?://edge[^ ]+\.m3u8' | tail -1)
			STREAM_LINK=${STREAM_LINK_GENERIC%%playlist.m3u8*}$(connect_utils dump_m3u ${STREAM_LINK_GENERIC} | tail -1)
		else
			echo "[$(date "+%Y%m%d-%H%M%S")] [${MODEL_NAME}] is offline/private now. (${CONNECT_STATUS})"
		fi
	fi

	# For stripchat:
	if [ ${PLATFORM} = "stripchat" ]; then

		if [[ ${CONNECT_DUMPS} =~ '"isCamAvailable":true' ]]; then

			local STREAMNAME=$(echo -e ${CONNECT_DUMPS})
			local STREAMNAME=${STREAMNAME#*'"streamName":"'}
			local STREAMNAME=${STREAMNAME%%'"'*}

			local PRESET=$(echo -e ${CONNECT_DUMPS})
			local PRESET=${CONNECT_DUMPS#*'"default":["'}
			local PRESET=${PRESET%%'"'*}

			local VIEWSERVER=$((RANDOM % (16) + 10)) # Random num BI 10 - 25

			# If ${PRESET} is not good, use automod.
			if [[ ${PRESET} =~ [\]\[{}\"\'] ]]; then # check if ${PRESET} has {}[]"'
				STREAM_LINK_GENERIC="https://edge-hls.doppiocdn.com/hls/${STREAMNAME}/master/${STREAMNAME}_auto.m3u8"
				STREAM_LINK=$(connect_utils dump_m3u ${STREAM_LINK_GENERIC} 2>/dev/null | tail -1)
			else
				STREAM_LINK_GENERIC="https://b-hls-${VIEWSERVER}.doppiocdn.live/hls/${STREAMNAME}/${STREAMNAME}_${PRESET}.m3u8"
				STREAM_LINK=${STREAM_LINK_GENERIC}
			fi
		else
			echo "[$(date "+%Y%m%d-%H%M%S")] [${MODEL_NAME}] is offline/private now. (${CONNECT_STATUS})"
		fi
	fi

	# If successfully grabed ${STREAM_LINK_GENERIC} ${STREAM_LINK}, show them.
	if [ ${STREAM_LINK} ]; then
		echo "[$(date "+%Y%m%d-%H%M%S")] Streamer is Online! Successfully capture with stream link:"
		echo "[$(date "+%Y%m%d-%H%M%S")] ${STREAM_LINK_GENERIC}"
		echo "[$(date "+%Y%m%d-%H%M%S")] Highest Definition Stream:"
		echo "[$(date "+%Y%m%d-%H%M%S")] ${STREAM_LINK}"
	fi

}

function grab_stream() {

	local FFMPEG_LOGFILE="${LOG_PATH}/${MODEL_NAME}-${PLATFORM}.ffmpeg.log"
	local CAPTURE_TIME=$(date "+%Y%m%d-%H%M%S")

	echo >> ${FFMPEG_LOGFILE}
	echo "========== [${CAPTURE_TIME}] ==========" >> ${FFMPEG_LOGFILE}
	echo >> ${FFMPEG_LOGFILE}

	ffmpeg \
	-user_agent "${UA}" \
	-i ${STREAM_LINK} \
	-c copy \
	-f segment \
	-segment_time 1800 \
	-segment_start_number 1 \
	-reset_timestamps 1 \
	-loglevel warning \
	${SAVE_PATH}/${MODEL_NAME}-${CAPTURE_TIME}_%03d.mkv \
	>> ${FFMPEG_LOGFILE} 2>&1
}

function watchdog() {
	while [ true ]; do
		link_to_m3u
		if [ ${STREAM_LINK} ]; then
			echo "[$(date "+%Y%m%d-%H%M%S")] Now start recording..."
			echo ${STREAM_LINK_GENERIC} > ${LOG_PATH}/${MODEL_NAME}-${PLATFORM}.online
			grab_stream
			echo "[$(date "+%Y%m%d-%H%M%S")] Recording Interrupted. Sleep for 1 min & try reconnect..."
			rm -f ${LOG_PATH}/${MODEL_NAME}-${PLATFORM}.online
			sleep 60
		else
			echo "[$(date "+%Y%m%d-%H%M%S")] Sleep for around 10 min..."
			sleep $((RANDOM % (661 - 540) + 540))
		fi
	done
}

function sock_washer {
	rm -f ${LOG_PATH}/${MODEL_NAME}-${PLATFORM}.online
	echo
	echo "8=====================D"
	echo "    BYE (. Y .) BYE"
	echo
	exit 0
}

# Execution Entry

trap 'sock_washer' SIGHUP SIGINT SIGQUIT SIGTERM

echo
echo "8=====================================================D"
echo " ┌─┐┬ ┬┌─┐┌┬┐┬ ┬┬─┐┌┐ ┌─┐┌┬┐┌─┐  ┌─┐┬─┐┌─┐┌┐ ┌┐ ┌─┐┬─┐"
echo " │  ├─┤├─┤ │ │ │├┬┘├┴┐├─┤ │ ├┤───│ ┬├┬┘├─┤├┴┐├┴┐├┤ ├┬┘"
echo " └─┘┴ ┴┴ ┴ ┴ └─┘┴└─└─┘┴ ┴ ┴ └─┘  └─┘┴└─┴ ┴└─┘└─┘└─┘┴└─"
echo "                        v${CTBCAP_VERSION}-r${CTBCAP_RELEASE}"
echo "8=====================================================D"
echo "              Simping Stream from CB & SC"
echo

handle_input $1 $2 $3

[[ ${DEBUG_MODE}  == "1" ]] && set -x # Debug Mode

[[ ${STREAM_MODE} == "1" ]] && link_to_m3u && exit 0

[[ ${EDGING_MODE} == "1" ]] && edging

prepare_simping

watchdog 2>&1 | tee -a ${LOG_PATH}/${MODEL_NAME}-${PLATFORM}.log

exit 0
